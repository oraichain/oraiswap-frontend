diff --git a/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/http.js b/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/http.js
index 8c72817..aa253d6 100644
--- a/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/http.js
+++ b/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/http.js
@@ -1,58 +1,34 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.http = void 0;
-const axios_1 = __importDefault(require("axios"));
 function filterBadStatus(res) {
     if (res.status >= 400) {
         throw new Error(`Bad status on response: ${res.status}`);
     }
     return res;
 }
-/**
- * Node.js 18 comes with exprimental fetch support (https://nodejs.org/de/blog/announcements/v18-release-announce/).
- * This is nice, but the implementation does not yet work wekk for us. We
- * can just stick with axios on those systems for now.
- */
-// eslint-disable-next-line @typescript-eslint/ban-types
-function isExperimental(nodeJsFunc) {
-    // This works because we get this info in node 18:
-    //
-    // > fetch.toString()
-    // 'async function fetch(input, init = undefined) {\n' +
-    // "    emitExperimentalWarning('The Fetch API');\n" +
-    // '    return lazyUndici().fetch(input, init);\n' +
-    // '  }'
-    return nodeJsFunc.toString().includes("emitExperimentalWarning");
-}
+
 /**
  * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)
  *
  * For some reason, fetch does not complain about missing server-side CORS support.
  */
 // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
-async function http(method, url, headers, request) {
-    if (typeof fetch === "function" && !isExperimental(fetch)) {
-        const settings = {
-            method: method,
-            body: request ? JSON.stringify(request) : undefined,
-            headers: {
-                // eslint-disable-next-line @typescript-eslint/naming-convention
-                "Content-Type": "application/json",
-                ...headers,
-            },
-        };
-        return fetch(url, settings)
-            .then(filterBadStatus)
-            .then((res) => res.json());
-    }
-    else {
-        return axios_1.default
-            .request({ url: url, method: method, data: request, headers: headers })
-            .then((res) => res.data);
-    }
+export default async function http(method, url, headers, request) {
+    const timeout = Number(import.meta.env.HTTP_TIMEOUT || 30000);
+    
+    const settings = {
+        method: method,
+        signal: AbortSignal.timeout(timeout),
+        body: request ? JSON.stringify(request) : undefined,
+        headers: {
+            // eslint-disable-next-line @typescript-eslint/naming-convention
+            "Content-Type": "application/json",
+            ...headers,
+        },
+    };
+    return fetch(url, settings)
+        .then(filterBadStatus)
+        .then((res) => res.json());
+    
 }
-exports.http = http;
 //# sourceMappingURL=http.js.map
\ No newline at end of file
diff --git a/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpclient.js b/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpclient.js
index 31f9ab1..e70070e 100644
--- a/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpclient.js
+++ b/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpclient.js
@@ -2,7 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.HttpClient = void 0;
 const json_rpc_1 = require("@cosmjs/json-rpc");
-const http_1 = require("./http");
+import http from "./http";
 const rpcclient_1 = require("./rpcclient");
 class HttpClient {
     constructor(endpoint) {
@@ -19,7 +19,7 @@ class HttpClient {
         // nothing to be done
     }
     async execute(request) {
-        const response = (0, json_rpc_1.parseJsonRpcResponse)(await (0, http_1.http)("POST", this.url, this.headers, request));
+        const response = (0, json_rpc_1.parseJsonRpcResponse)(await http("POST", this.url, this.headers, request));
         if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {
             throw new Error(JSON.stringify(response.error));
         }
diff --git a/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/adaptor/responses.js b/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/adaptor/responses.js
index a426641..9f33204 100644
--- a/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/adaptor/responses.js
+++ b/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/adaptor/responses.js
@@ -320,6 +320,7 @@ function decodeTxProof(data) {
 }
 function decodeTxResponse(data) {
     return {
+        ...data,
         tx: (0, encoding_1.fromBase64)((0, encodings_1.assertNotEmpty)(data.tx)),
         result: decodeTxData((0, encodings_1.assertObject)(data.tx_result)),
         height: (0, inthelpers_1.apiToSmallInt)((0, encodings_1.assertNotEmpty)(data.height)),
diff --git a/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/tendermint34client.js b/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/tendermint34client.js
index f822f39..8889b81 100644
--- a/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/tendermint34client.js
+++ b/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/tendermint34client.js
@@ -47,7 +47,7 @@ class Tendermint34Client {
         // (our CI) when skipping the status call before doing other queries. Sleeping a little
         // while did not help. Thus we query the version as a way to say "hi" to the backend,
         // even in cases where we don't use the result.
-        const _version = await this.detectVersion(rpcClient);
+        // const _version = await this.detectVersion(rpcClient);
         return Tendermint34Client.create(rpcClient);
     }
     /**
diff --git a/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/tendermint37client.js b/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/tendermint37client.js
index 8f78cc6..a307de1 100644
--- a/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/tendermint37client.js
+++ b/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/tendermint37client.js
@@ -47,7 +47,7 @@ class Tendermint37Client {
         // (our CI) when skipping the status call before doing other queries. Sleeping a little
         // while did not help. Thus we query the version as a way to say "hi" to the backend,
         // even in cases where we don't use the result.
-        const _version = await this.detectVersion(rpcClient);
+        // const _version = await this.detectVersion(rpcClient);
         return Tendermint37Client.create(rpcClient);
     }
     /**
