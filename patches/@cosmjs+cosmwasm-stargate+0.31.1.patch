diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.d.ts b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.d.ts
index e0c0a30..3047021 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.d.ts
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.d.ts
@@ -87,11 +87,22 @@ export interface ExecuteResult {
     readonly logs: readonly logs.Log[];
     /** Block height in which the transaction is included */
     readonly height: number;
+    /** The position of the transaction within the block. This is a 0-based index. */
+    readonly txIndex: number;
     /** Transaction hash (might be used as transaction ID). Guaranteed to be non-empty upper-case hex */
     readonly transactionHash: string;
     readonly events: readonly Event[];
     readonly gasWanted: number;
     readonly gasUsed: number;
+    /**
+     * The message responses of the [TxMsgData](https://github.com/cosmos/cosmos-sdk/blob/v0.46.3/proto/cosmos/base/abci/v1beta1/abci.proto#L128-L140)
+     * as `Any`s.
+     * This field is an empty list for chains running Cosmos SDK < 0.46.
+     */
+    readonly msgResponses: Array<{
+        readonly typeUrl: string;
+        readonly value: Uint8Array;
+    }>;
 }
 export interface SigningCosmWasmClientOptions {
     readonly registry?: Registry;
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
index 646bbe7..01f9cad 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
@@ -274,6 +274,7 @@ class SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {
             throw new Error(createDeliverTxResponseErrorMessage(result));
         }
         return {
+            ...result,
             logs: stargate_1.logs.parseRawLog(result.rawLog),
             height: result.height,
             transactionHash: result.transactionHash,
@@ -393,7 +394,10 @@ class SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {
             throw new Error("Failed to retrieve account from signer");
         }
         const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
-        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
+        let signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
+        if (this.signer.signEip191) {
+            signMode = signing_1.SignMode.SIGN_MODE_EIP_191;
+        }
         const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));
         const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);
         const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);
