/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {Addr, Uint128, Binary, SwapOperation, AssetInfo, Cw20ReceiveMsg} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, SimulateSwapOperationsResponse} from "./OraiswapRouter.types";
import { OraiswapRouterQueryClient, OraiswapRouterClient } from "./OraiswapRouter.client";
export interface OraiswapRouterReactQuery<TResponse, TData = TResponse> {
  client: OraiswapRouterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface OraiswapRouterSimulateSwapOperationsQuery<TData> extends OraiswapRouterReactQuery<SimulateSwapOperationsResponse, TData> {
  args: {
    offerAmount: Uint128;
    operations: SwapOperation[];
  };
}
export function useOraiswapRouterSimulateSwapOperationsQuery<TData = SimulateSwapOperationsResponse>({
  client,
  args,
  options
}: OraiswapRouterSimulateSwapOperationsQuery<TData>) {
  return useQuery<SimulateSwapOperationsResponse, Error, TData>(["oraiswapRouterSimulateSwapOperations", client?.contractAddress, JSON.stringify(args)], () => client ? client.simulateSwapOperations({
    offerAmount: args.offerAmount,
    operations: args.operations
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapRouterConfigQuery<TData> extends OraiswapRouterReactQuery<ConfigResponse, TData> {}
export function useOraiswapRouterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OraiswapRouterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["oraiswapRouterConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapRouterAssertMinimumReceiveMutation {
  client: OraiswapRouterClient;
  msg: {
    assetInfo: AssetInfo;
    minimumReceive: Uint128;
    prevBalance: Uint128;
    receiver: Addr;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRouterAssertMinimumReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRouterAssertMinimumReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRouterAssertMinimumReceiveMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.assertMinimumReceive(msg, $fee, $memo, $funds), options);
}
export interface OraiswapRouterExecuteSwapOperationMutation {
  client: OraiswapRouterClient;
  msg: {
    operation: SwapOperation;
    to?: Addr;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRouterExecuteSwapOperationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRouterExecuteSwapOperationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRouterExecuteSwapOperationMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.executeSwapOperation(msg, $fee, $memo, $funds), options);
}
export interface OraiswapRouterExecuteSwapOperationsMutation {
  client: OraiswapRouterClient;
  msg: {
    minimumReceive?: Uint128;
    operations: SwapOperation[];
    to?: Addr;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRouterExecuteSwapOperationsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRouterExecuteSwapOperationsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRouterExecuteSwapOperationsMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.executeSwapOperations(msg, $fee, $memo, $funds), options);
}
export interface OraiswapRouterReceiveMutation {
  client: OraiswapRouterClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRouterReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRouterReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRouterReceiveMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.receive(msg, $fee, $memo, $funds), options);
}