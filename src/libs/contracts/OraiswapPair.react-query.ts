/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {  Addr, Decimal, Cw20ReceiveMsg, Asset } from "./types";
import { PairResponse, PoolResponse, ReverseSimulationResponse, SimulationResponse} from "./OraiswapPair.types";
import { OraiswapPairQueryClient, OraiswapPairClient } from "./OraiswapPair.client";
export interface OraiswapPairReactQuery<TResponse, TData = TResponse> {
  client: OraiswapPairQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData: undefined;
  };
}
export interface OraiswapPairReverseSimulationQuery<TData> extends OraiswapPairReactQuery<ReverseSimulationResponse, TData> {
  args: {
    askAsset: Asset;
  };
}
export function useOraiswapPairReverseSimulationQuery<TData = ReverseSimulationResponse>({
  client,
  args,
  options
}: OraiswapPairReverseSimulationQuery<TData>) {
  return useQuery<ReverseSimulationResponse, Error, TData>(["oraiswapPairReverseSimulation", client?.contractAddress, JSON.stringify(args)], () => client ? client.reverseSimulation({
    askAsset: args.askAsset
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapPairSimulationQuery<TData> extends OraiswapPairReactQuery<SimulationResponse, TData> {
  args: {
    offerAsset: Asset;
  };
}
export function useOraiswapPairSimulationQuery<TData = SimulationResponse>({
  client,
  args,
  options
}: OraiswapPairSimulationQuery<TData>) {
  return useQuery<SimulationResponse, Error, TData>(["oraiswapPairSimulation", client?.contractAddress, JSON.stringify(args)], () => client ? client.simulation({
    offerAsset: args.offerAsset
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapPairPoolQuery<TData> extends OraiswapPairReactQuery<PoolResponse, TData> {}
export function useOraiswapPairPoolQuery<TData = PoolResponse>({
  client,
  options
}: OraiswapPairPoolQuery<TData>) {
  return useQuery<PoolResponse, Error, TData>(["oraiswapPairPool", client?.contractAddress], () => client ? client.pool() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapPairPairQuery<TData> extends OraiswapPairReactQuery<PairResponse, TData> {}
export function useOraiswapPairPairQuery<TData = PairResponse>({
  client,
  options
}: OraiswapPairPairQuery<TData>) {
  return useQuery<PairResponse, Error, TData>(["oraiswapPairPair", client?.contractAddress], () => client ? client.pair() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapPairSwapMutation {
  client: OraiswapPairClient;
  msg: {
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    to?: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapPairSwapMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapPairSwapMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapPairSwapMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.swap(msg, fee, memo, funds), options);
}
export interface OraiswapPairProvideLiquidityMutation {
  client: OraiswapPairClient;
  msg: {
    assets: Asset[];
    receiver?: Addr;
    slippageTolerance?: Decimal;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapPairProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapPairProvideLiquidityMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapPairProvideLiquidityMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.provideLiquidity(msg, fee, memo, funds), options);
}
export interface OraiswapPairReceiveMutation {
  client: OraiswapPairClient;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapPairReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapPairReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapPairReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}