/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, AssetInfo, Cw20ReceiveMsg, TokenInfo} from "./types";
import { ConfigResponse, ConvertInfoResponse} from "./OraiswapConverter.types";
import { OraiswapConverterQueryClient, OraiswapConverterClient } from "./OraiswapConverter.client";
export interface OraiswapConverterReactQuery<TResponse, TData = TResponse> {
  client: OraiswapConverterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData: undefined;
  };
}
export interface OraiswapConverterConvertInfoQuery<TData> extends OraiswapConverterReactQuery<ConvertInfoResponse, TData> {
  args: {
    assetInfo: AssetInfo;
  };
}
export function useOraiswapConverterConvertInfoQuery<TData = ConvertInfoResponse>({
  client,
  args,
  options
}: OraiswapConverterConvertInfoQuery<TData>) {
  return useQuery<ConvertInfoResponse, Error, TData>(["oraiswapConverterConvertInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.convertInfo({
    assetInfo: args.assetInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapConverterConfigQuery<TData> extends OraiswapConverterReactQuery<ConfigResponse, TData> {}
export function useOraiswapConverterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OraiswapConverterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["oraiswapConverterConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapConverterWithdrawTokensMutation {
  client: OraiswapConverterClient;
  msg: {
    assetInfos: AssetInfo[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterWithdrawTokensMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterWithdrawTokensMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterWithdrawTokensMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawTokens(msg, fee, memo, funds), options);
}
export interface OraiswapConverterConvertReverseMutation {
  client: OraiswapConverterClient;
  msg: {
    fromAsset: AssetInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterConvertReverseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterConvertReverseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterConvertReverseMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.convertReverse(msg, fee, memo, funds), options);
}
export interface OraiswapConverterUnregisterPairMutation {
  client: OraiswapConverterClient;
  msg: {
    from: TokenInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterUnregisterPairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterUnregisterPairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterUnregisterPairMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unregisterPair(msg, fee, memo, funds), options);
}
export interface OraiswapConverterUpdatePairMutation {
  client: OraiswapConverterClient;
  msg: {
    from: TokenInfo;
    to: TokenInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterUpdatePairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterUpdatePairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterUpdatePairMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePair(msg, fee, memo, funds), options);
}
export interface OraiswapConverterConvertMutation {
  client: OraiswapConverterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterConvertMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterConvertMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterConvertMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.convert(fee, memo, funds), options);
}
export interface OraiswapConverterUpdateConfigMutation {
  client: OraiswapConverterClient;
  msg: {
    owner: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface OraiswapConverterReceiveMutation {
  client: OraiswapConverterClient;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapConverterReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapConverterReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapConverterReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}