/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, Binary, Decimal, Asset} from "./types";
import { PairResponse, PoolResponse, ReverseSimulationResponse, SimulationResponse} from "./OraiswapPair.types";
export interface OraiswapPairReadOnlyInterface {
  contractAddress: string;
  pair: () => Promise<PairResponse>;
  pool: () => Promise<PoolResponse>;
  simulation: ({
    offerAsset
  }: {
    offerAsset: Asset;
  }) => Promise<SimulationResponse>;
  reverseSimulation: ({
    askAsset
  }: {
    askAsset: Asset;
  }) => Promise<ReverseSimulationResponse>;
}
export class OraiswapPairQueryClient implements OraiswapPairReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.pair = this.pair.bind(this);
    this.pool = this.pool.bind(this);
    this.simulation = this.simulation.bind(this);
    this.reverseSimulation = this.reverseSimulation.bind(this);
  }

  pair = async (): Promise<PairResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {}
    });
  };
  pool = async (): Promise<PoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool: {}
    });
  };
  simulation = async ({
    offerAsset
  }: {
    offerAsset: Asset;
  }): Promise<SimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulation: {
        offer_asset: offerAsset
      }
    });
  };
  reverseSimulation = async ({
    askAsset
  }: {
    askAsset: Asset;
  }): Promise<ReverseSimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reverse_simulation: {
        ask_asset: askAsset
      }
    });
  };
}
export interface OraiswapPairInterface extends OraiswapPairReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  provideLiquidity: ({
    assets,
    receiver,
    slippageTolerance
  }: {
    assets: Asset[];
    receiver?: Addr;
    slippageTolerance?: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  swap: ({
    beliefPrice,
    maxSpread,
    offerAsset,
    to
  }: {
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    to?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapPairClient extends OraiswapPairQueryClient implements OraiswapPairInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.provideLiquidity = this.provideLiquidity.bind(this);
    this.swap = this.swap.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  provideLiquidity = async ({
    assets,
    receiver,
    slippageTolerance
  }: {
    assets: Asset[];
    receiver?: Addr;
    slippageTolerance?: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      provide_liquidity: {
        assets,
        receiver,
        slippage_tolerance: slippageTolerance
      }
    }, fee, memo, funds);
  };
  swap = async ({
    beliefPrice,
    maxSpread,
    offerAsset,
    to
  }: {
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    to?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap: {
        belief_price: beliefPrice,
        max_spread: maxSpread,
        offer_asset: offerAsset,
        to
      }
    }, fee, memo, funds);
  };
}