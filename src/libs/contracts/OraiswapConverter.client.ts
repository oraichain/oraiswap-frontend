/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Uint128, Binary, Addr, AssetInfo, TokenInfo} from "./types";
import {ConfigResponse, ConvertInfoResponse} from "./OraiswapConverter.types";
export interface OraiswapConverterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  convertInfo: ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }) => Promise<ConvertInfoResponse>;
}
export class OraiswapConverterQueryClient implements OraiswapConverterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.convertInfo = this.convertInfo.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  convertInfo = async ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }): Promise<ConvertInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      convert_info: {
        asset_info: assetInfo
      }
    });
  };
}
export interface OraiswapConverterInterface extends OraiswapConverterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    owner
  }: {
    owner: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  convert: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updatePair: ({
    from,
    to
  }: {
    from: TokenInfo;
    to: TokenInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unregisterPair: ({
    from
  }: {
    from: TokenInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  convertReverse: ({
    fromAsset
  }: {
    fromAsset: AssetInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawTokens: ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapConverterClient extends OraiswapConverterQueryClient implements OraiswapConverterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.convert = this.convert.bind(this);
    this.updatePair = this.updatePair.bind(this);
    this.unregisterPair = this.unregisterPair.bind(this);
    this.convertReverse = this.convertReverse.bind(this);
    this.withdrawTokens = this.withdrawTokens.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  updateConfig = async ({
    owner
  }: {
    owner: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        owner
      }
    }, fee, memo, funds);
  };
  convert = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      convert: {}
    }, fee, memo, funds);
  };
  updatePair = async ({
    from,
    to
  }: {
    from: TokenInfo;
    to: TokenInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_pair: {
        from,
        to
      }
    }, fee, memo, funds);
  };
  unregisterPair = async ({
    from
  }: {
    from: TokenInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unregister_pair: {
        from
      }
    }, fee, memo, funds);
  };
  convertReverse = async ({
    fromAsset
  }: {
    fromAsset: AssetInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      convert_reverse: {
        from_asset: fromAsset
      }
    }, fee, memo, funds);
  };
  withdrawTokens = async ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_tokens: {
        asset_infos: assetInfos
      }
    }, fee, memo, funds);
  };
}