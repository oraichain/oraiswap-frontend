/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {Addr, AssetInfo, Uint128} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, DistributionInfoResponse, RewardAmountPerSecondResponse} from "./OraiswapRewarder.types";
import { OraiswapRewarderQueryClient, OraiswapRewarderClient } from "./OraiswapRewarder.client";
export interface OraiswapRewarderReactQuery<TResponse, TData = TResponse> {
  client: OraiswapRewarderQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface OraiswapRewarderRewardAmountPerSecQuery<TData> extends OraiswapRewarderReactQuery<RewardAmountPerSecondResponse, TData> {
  args: {
    assetInfo: AssetInfo;
  };
}
export function useOraiswapRewarderRewardAmountPerSecQuery<TData = RewardAmountPerSecondResponse>({
  client,
  args,
  options
}: OraiswapRewarderRewardAmountPerSecQuery<TData>) {
  return useQuery<RewardAmountPerSecondResponse, Error, TData>(["oraiswapRewarderRewardAmountPerSec", client?.contractAddress, JSON.stringify(args)], () => client ? client.rewardAmountPerSec({
    assetInfo: args.assetInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapRewarderDistributionInfoQuery<TData> extends OraiswapRewarderReactQuery<DistributionInfoResponse, TData> {
  args: {
    assetInfo: AssetInfo;
  };
}
export function useOraiswapRewarderDistributionInfoQuery<TData = DistributionInfoResponse>({
  client,
  args,
  options
}: OraiswapRewarderDistributionInfoQuery<TData>) {
  return useQuery<DistributionInfoResponse, Error, TData>(["oraiswapRewarderDistributionInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.distributionInfo({
    assetInfo: args.assetInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapRewarderConfigQuery<TData> extends OraiswapRewarderReactQuery<ConfigResponse, TData> {}
export function useOraiswapRewarderConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OraiswapRewarderConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["oraiswapRewarderConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapRewarderDistributeMutation {
  client: OraiswapRewarderClient;
  msg: {
    assetInfos: AssetInfo[];
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRewarderDistributeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRewarderDistributeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRewarderDistributeMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.distribute(msg, $fee, $memo, $funds), options);
}
export interface OraiswapRewarderUpdateConfigMutation {
  client: OraiswapRewarderClient;
  msg: {
    distributionInterval?: number;
    owner?: Addr;
    stakingContract?: Addr;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapRewarderUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapRewarderUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapRewarderUpdateConfigMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.updateConfig(msg, $fee, $memo, $funds), options);
}