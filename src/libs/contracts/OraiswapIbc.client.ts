/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Binary, Uint64, Coin } from "./types";
import { AdminResponse, AllowedResponse, ChannelResponse, ConfigResponse, AllowedTokenResponse, ListAllowedResponse, ListChannelsResponse, ListExternalTokensResponse, LockupResponse} from "./OraiswapIbc.types";
export interface OraiswapIbcReadOnlyInterface {
  contractAddress: string;
  listChannels: () => Promise<ListChannelsResponse>;
  channel: ({
    id
  }: {
    id: string;
  }) => Promise<ChannelResponse>;
  config: () => Promise<ConfigResponse>;
  admin: () => Promise<AdminResponse>;
  allowed: ({
    contract
  }: {
    contract: string;
  }) => Promise<AllowedResponse>;
  externalToken: ({
    denom
  }: {
    denom: string;
  }) => Promise<AllowedTokenResponse>;
  listAllowed: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ListAllowedResponse>;
  listExternalTokens: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ListExternalTokensResponse>;
  lockup: ({
    channel,
    owner
  }: {
    channel: string;
    owner: string;
  }) => Promise<LockupResponse>;
}
export class OraiswapIbcQueryClient implements OraiswapIbcReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listChannels = this.listChannels.bind(this);
    this.channel = this.channel.bind(this);
    this.config = this.config.bind(this);
    this.admin = this.admin.bind(this);
    this.allowed = this.allowed.bind(this);
    this.externalToken = this.externalToken.bind(this);
    this.listAllowed = this.listAllowed.bind(this);
    this.listExternalTokens = this.listExternalTokens.bind(this);
    this.lockup = this.lockup.bind(this);
  }

  listChannels = async (): Promise<ListChannelsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_channels: {}
    });
  };
  channel = async ({
    id
  }: {
    id: string;
  }): Promise<ChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel: {
        id
      }
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  admin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  allowed = async ({
    contract
  }: {
    contract: string;
  }): Promise<AllowedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allowed: {
        contract
      }
    });
  };
  externalToken = async ({
    denom
  }: {
    denom: string;
  }): Promise<AllowedTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      external_token: {
        denom
      }
    });
  };
  listAllowed = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ListAllowedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_allowed: {
        limit,
        start_after: startAfter
      }
    });
  };
  listExternalTokens = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ListExternalTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_external_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
  lockup = async ({
    channel,
    owner
  }: {
    channel: string;
    owner: string;
  }): Promise<LockupResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lockup: {
        channel,
        owner
      }
    });
  };
}
export interface OraiswapIbcInterface extends OraiswapIbcReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  transfer: ({
    channel,
    remoteAddress,
    timeout
  }: {
    channel: string;
    remoteAddress: string;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  swap: ({
    channel,
    minAmountOut,
    pool,
    timeout,
    tokenOut
  }: {
    channel: string;
    minAmountOut: Uint128;
    pool: Uint64;
    timeout?: number;
    tokenOut: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  joinPool: ({
    channel,
    pool,
    shareMinOut,
    timeout
  }: {
    channel: string;
    pool: Uint64;
    shareMinOut: Uint128;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  exitPool: ({
    channel,
    minAmountOut,
    timeout,
    tokenOut
  }: {
    channel: string;
    minAmountOut: Uint128;
    timeout?: number;
    tokenOut: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createLockup: ({
    channel,
    timeout
  }: {
    channel: string;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  lockTokens: ({
    channel,
    duration,
    timeout
  }: {
    channel: string;
    duration: Uint64;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimTokens: ({
    channel,
    denom,
    timeout
  }: {
    channel: string;
    denom: string;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unlockTokens: ({
    channel,
    lockId,
    timeout
  }: {
    channel: string;
    lockId: Uint64;
    timeout?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  allow: ({
    contract,
    gasLimit
  }: {
    contract: string;
    gasLimit?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  allowExternalToken: ({
    contract,
    denom
  }: {
    contract: string;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapIbcClient extends OraiswapIbcQueryClient implements OraiswapIbcInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.transfer = this.transfer.bind(this);
    this.swap = this.swap.bind(this);
    this.joinPool = this.joinPool.bind(this);
    this.exitPool = this.exitPool.bind(this);
    this.createLockup = this.createLockup.bind(this);
    this.lockTokens = this.lockTokens.bind(this);
    this.claimTokens = this.claimTokens.bind(this);
    this.unlockTokens = this.unlockTokens.bind(this);
    this.allow = this.allow.bind(this);
    this.allowExternalToken = this.allowExternalToken.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, funds);
  };
  transfer = async ({
    channel,
    remoteAddress,
    timeout
  }: {
    channel: string;
    remoteAddress: string;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer: {
        channel,
        remote_address: remoteAddress,
        timeout
      }
    }, fee, memo, funds);
  };
  swap = async ({
    channel,
    minAmountOut,
    pool,
    timeout,
    tokenOut
  }: {
    channel: string;
    minAmountOut: Uint128;
    pool: Uint64;
    timeout?: number;
    tokenOut: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap: {
        channel,
        min_amount_out: minAmountOut,
        pool,
        timeout,
        token_out: tokenOut
      }
    }, fee, memo, funds);
  };
  joinPool = async ({
    channel,
    pool,
    shareMinOut,
    timeout
  }: {
    channel: string;
    pool: Uint64;
    shareMinOut: Uint128;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      join_pool: {
        channel,
        pool,
        share_min_out: shareMinOut,
        timeout
      }
    }, fee, memo, funds);
  };
  exitPool = async ({
    channel,
    minAmountOut,
    timeout,
    tokenOut
  }: {
    channel: string;
    minAmountOut: Uint128;
    timeout?: number;
    tokenOut: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      exit_pool: {
        channel,
        min_amount_out: minAmountOut,
        timeout,
        token_out: tokenOut
      }
    }, fee, memo, funds);
  };
  createLockup = async ({
    channel,
    timeout
  }: {
    channel: string;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_lockup: {
        channel,
        timeout
      }
    }, fee, memo, funds);
  };
  lockTokens = async ({
    channel,
    duration,
    timeout
  }: {
    channel: string;
    duration: Uint64;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_tokens: {
        channel,
        duration,
        timeout
      }
    }, fee, memo, funds);
  };
  claimTokens = async ({
    channel,
    denom,
    timeout
  }: {
    channel: string;
    denom: string;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_tokens: {
        channel,
        denom,
        timeout
      }
    }, fee, memo, funds);
  };
  unlockTokens = async ({
    channel,
    lockId,
    timeout
  }: {
    channel: string;
    lockId: Uint64;
    timeout?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unlock_tokens: {
        channel,
        lock_id: lockId,
        timeout
      }
    }, fee, memo, funds);
  };
  allow = async ({
    contract,
    gasLimit
  }: {
    contract: string;
    gasLimit?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      allow: {
        contract,
        gas_limit: gasLimit
      }
    }, fee, memo, funds);
  };
  allowExternalToken = async ({
    contract,
    denom
  }: {
    contract: string;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      allow_external_token: {
        contract,
        denom
      }
    }, fee, memo, funds);
  };
  updateAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        admin
      }
    }, fee, memo, funds);
  };
}