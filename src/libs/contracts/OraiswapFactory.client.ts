/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, PairInfo} from "./types";
import { ConfigResponse, PairsResponse} from "./OraiswapFactory.types";
export interface OraiswapFactoryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  pair: ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }) => Promise<PairInfo>;
  pairs: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: AssetInfo[];
  }) => Promise<PairsResponse>;
}
export class OraiswapFactoryQueryClient implements OraiswapFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.pair = this.pair.bind(this);
    this.pairs = this.pairs.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  pair = async ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }): Promise<PairInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {
        asset_infos: assetInfos
      }
    });
  };
  pairs = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: AssetInfo[];
  }): Promise<PairsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pairs: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface OraiswapFactoryInterface extends OraiswapFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    owner,
    pairCodeId,
    tokenCodeId
  }: {
    owner?: string;
    pairCodeId?: number;
    tokenCodeId?: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  createPair: ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapFactoryClient extends OraiswapFactoryQueryClient implements OraiswapFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createPair = this.createPair.bind(this);
  }

  updateConfig = async ({
    owner,
    pairCodeId,
    tokenCodeId
  }: {
    owner?: string;
    pairCodeId?: number;
    tokenCodeId?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        owner,
        pair_code_id: pairCodeId,
        token_code_id: tokenCodeId
      }
    }, fee, memo, funds);
  };
  createPair = async ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_pair: {
        asset_infos: assetInfos
      }
    }, fee, memo, funds);
  };
}