/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {Addr, AssetInfo, PairInfo} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, PairsResponse} from "./OraiswapFactory.types";
import { OraiswapFactoryQueryClient, OraiswapFactoryClient } from "./OraiswapFactory.client";
export interface OraiswapFactoryReactQuery<TResponse, TData = TResponse> {
  client: OraiswapFactoryQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface OraiswapFactoryPairsQuery<TData> extends OraiswapFactoryReactQuery<PairsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: AssetInfo[];
  };
}
export function useOraiswapFactoryPairsQuery<TData = PairsResponse>({
  client,
  args,
  options
}: OraiswapFactoryPairsQuery<TData>) {
  return useQuery<PairsResponse, Error, TData>(["oraiswapFactoryPairs", client?.contractAddress, JSON.stringify(args)], () => client ? client.pairs({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapFactoryPairQuery<TData> extends OraiswapFactoryReactQuery<PairInfo, TData> {
  args: {
    assetInfos: AssetInfo[];
  };
}
export function useOraiswapFactoryPairQuery<TData = PairInfo>({
  client,
  args,
  options
}: OraiswapFactoryPairQuery<TData>) {
  return useQuery<PairInfo, Error, TData>(["oraiswapFactoryPair", client?.contractAddress, JSON.stringify(args)], () => client ? client.pair({
    assetInfos: args.assetInfos
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapFactoryConfigQuery<TData> extends OraiswapFactoryReactQuery<ConfigResponse, TData> {}
export function useOraiswapFactoryConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OraiswapFactoryConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["oraiswapFactoryConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapFactoryAddPairMutation {
  client: OraiswapFactoryClient;
  msg: {
    pairInfo: PairInfo;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapFactoryAddPairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapFactoryAddPairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapFactoryAddPairMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.addPair(msg, $fee, $memo, $funds), options);
}
export interface OraiswapFactoryCreatePairMutation {
  client: OraiswapFactoryClient;
  msg: {
    assetInfos: AssetInfo[];
    pairAdmin?: string;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapFactoryCreatePairMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapFactoryCreatePairMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapFactoryCreatePairMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.createPair(msg, $fee, $memo, $funds), options);
}
export interface OraiswapFactoryUpdateConfigMutation {
  client: OraiswapFactoryClient;
  msg: {
    owner?: string;
    pairCodeId?: number;
    tokenCodeId?: number;
  };
  args?: {
    $fee?: number | StdFee | "auto";
    $memo?: string;
    $funds?: Coin[];
  };
}
export function useOraiswapFactoryUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapFactoryUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapFactoryUpdateConfigMutation>(({
    client,
    msg,
    args: {
      $fee,
      $memo,
      $funds
    } = {}
  }) => client.updateConfig(msg, $fee, $memo, $funds), options);
}