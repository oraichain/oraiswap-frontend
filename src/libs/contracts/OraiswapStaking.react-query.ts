/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {Addr, Uint128, AssetInfo, Decimal, Cw20ReceiveMsg, Asset} from "./types";
import { ConfigResponse, PoolInfoResponse, RewardInfoResponse, ArrayOfRewardInfoResponse, RewardsPerSecResponse} from "./OraiswapStaking.types";
import { OraiswapStakingQueryClient, OraiswapStakingClient } from "./OraiswapStaking.client";
export interface OraiswapStakingReactQuery<TResponse, TData = TResponse> {
  client: OraiswapStakingQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData: undefined;
  };
}
export interface OraiswapStakingRewardInfosQuery<TData> extends OraiswapStakingReactQuery<ArrayOfRewardInfoResponse, TData> {
  args: {
    assetInfo: AssetInfo;
    limit?: number;
    order?: number;
    startAfter?: Addr;
  };
}
export function useOraiswapStakingRewardInfosQuery<TData = ArrayOfRewardInfoResponse>({
  client,
  args,
  options
}: OraiswapStakingRewardInfosQuery<TData>) {
  return useQuery<ArrayOfRewardInfoResponse, Error, TData>(["oraiswapStakingRewardInfos", client?.contractAddress, JSON.stringify(args)], () => client ? client.rewardInfos({
    assetInfo: args.assetInfo,
    limit: args.limit,
    order: args.order,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapStakingRewardInfoQuery<TData> extends OraiswapStakingReactQuery<RewardInfoResponse, TData> {
  args: {
    assetInfo?: AssetInfo;
    stakerAddr: Addr;
  };
}
export function useOraiswapStakingRewardInfoQuery<TData = RewardInfoResponse>({
  client,
  args,
  options
}: OraiswapStakingRewardInfoQuery<TData>) {
  return useQuery<RewardInfoResponse, Error, TData>(["oraiswapStakingRewardInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.rewardInfo({
    assetInfo: args.assetInfo,
    stakerAddr: args.stakerAddr
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapStakingRewardsPerSecQuery<TData> extends OraiswapStakingReactQuery<RewardsPerSecResponse, TData> {
  args: {
    assetInfo: AssetInfo;
  };
}
export function useOraiswapStakingRewardsPerSecQuery<TData = RewardsPerSecResponse>({
  client,
  args,
  options
}: OraiswapStakingRewardsPerSecQuery<TData>) {
  return useQuery<RewardsPerSecResponse, Error, TData>(["oraiswapStakingRewardsPerSec", client?.contractAddress, JSON.stringify(args)], () => client ? client.rewardsPerSec({
    assetInfo: args.assetInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapStakingPoolInfoQuery<TData> extends OraiswapStakingReactQuery<PoolInfoResponse, TData> {
  args: {
    assetInfo: AssetInfo;
  };
}
export function useOraiswapStakingPoolInfoQuery<TData = PoolInfoResponse>({
  client,
  args,
  options
}: OraiswapStakingPoolInfoQuery<TData>) {
  return useQuery<PoolInfoResponse, Error, TData>(["oraiswapStakingPoolInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.poolInfo({
    assetInfo: args.assetInfo
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapStakingConfigQuery<TData> extends OraiswapStakingReactQuery<ConfigResponse, TData> {}
export function useOraiswapStakingConfigQuery<TData = ConfigResponse>({
  client,
  options
}: OraiswapStakingConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["oraiswapStakingConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface OraiswapStakingUpdateListStakersMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo: AssetInfo;
    stakers: Addr[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingUpdateListStakersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingUpdateListStakersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingUpdateListStakersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateListStakers(msg, fee, memo, funds), options);
}
export interface OraiswapStakingAutoStakeHookMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo: AssetInfo;
    prevStakingTokenAmount: Uint128;
    stakerAddr: Addr;
    stakingToken: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingAutoStakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingAutoStakeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingAutoStakeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.autoStakeHook(msg, fee, memo, funds), options);
}
export interface OraiswapStakingAutoStakeMutation {
  client: OraiswapStakingClient;
  msg: {
    assets: Asset[];
    slippageTolerance?: Decimal;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingAutoStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingAutoStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingAutoStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.autoStake(msg, fee, memo, funds), options);
}
export interface OraiswapStakingWithdrawOthersMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo?: AssetInfo;
    stakerAddrs: Addr[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingWithdrawOthersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingWithdrawOthersMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingWithdrawOthersMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawOthers(msg, fee, memo, funds), options);
}
export interface OraiswapStakingWithdrawMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo?: AssetInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface OraiswapStakingUnbondMutation {
  client: OraiswapStakingClient;
  msg: {
    amount: Uint128;
    assetInfo: AssetInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingUnbondMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingUnbondMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingUnbondMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unbond(msg, fee, memo, funds), options);
}
export interface OraiswapStakingDepositRewardMutation {
  client: OraiswapStakingClient;
  msg: {
    rewards: Asset[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingDepositRewardMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingDepositRewardMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingDepositRewardMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.depositReward(msg, fee, memo, funds), options);
}
export interface OraiswapStakingUpdateRewardsPerSecMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo: AssetInfo;
    assets: Asset[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingUpdateRewardsPerSecMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingUpdateRewardsPerSecMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingUpdateRewardsPerSecMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateRewardsPerSec(msg, fee, memo, funds), options);
}
export interface OraiswapStakingDeprecateStakingTokenMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo: AssetInfo;
    newStakingToken: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingDeprecateStakingTokenMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingDeprecateStakingTokenMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingDeprecateStakingTokenMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.deprecateStakingToken(msg, fee, memo, funds), options);
}
export interface OraiswapStakingRegisterAssetMutation {
  client: OraiswapStakingClient;
  msg: {
    assetInfo: AssetInfo;
    stakingToken: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingRegisterAssetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingRegisterAssetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingRegisterAssetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.registerAsset(msg, fee, memo, funds), options);
}
export interface OraiswapStakingUpdateConfigMutation {
  client: OraiswapStakingClient;
  msg: {
    owner?: Addr;
    rewarder?: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface OraiswapStakingReceiveMutation {
  client: OraiswapStakingClient;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useOraiswapStakingReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, OraiswapStakingReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, OraiswapStakingReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}