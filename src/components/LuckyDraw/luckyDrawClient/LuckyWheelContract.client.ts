/**
 * This file was automatically generated by @oraichain/ts-codegen@0.35.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @oraichain/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import {
  Uint256,
  Uint128,
  Addr,
  AssetInfo,
  InstantiateMsg,
  Cell,
  ExecuteMsg,
  Binary,
  Cw20ReceiveMsg,
  QueryMsg,
  Config,
  Uint64,
  Spin,
  State,
  WheelCell
} from './LuckyWheelContract.types';
export interface LuckyWheelContractReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  state: () => Promise<State>;
  spin: ({ id }: { id: number }) => Promise<Spin>;
  lastSpinId: () => Promise<Uint64>;
}

export class LuckyWheelContractQueryClient implements LuckyWheelContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.spin = this.spin.bind(this);
    this.lastSpinId = this.lastSpinId.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<State> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  spin = async ({ id }: { id: number }): Promise<Spin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      spin: {
        id
      }
    });
  };
  lastSpinId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      last_spin_id: {}
    });
  };
}
export interface LuckyWheelContractInterface extends LuckyWheelContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    _fee?: number | StdFee | 'auto',
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateConfig: (
    {
      feePerSpin,
      owner,
      participationToken,
      rewardToken,
      totalPrize
    }: {
      feePerSpin?: Uint128;
      owner?: Addr;
      participationToken?: AssetInfo;
      rewardToken?: AssetInfo;
      totalPrize?: Uint128;
    },
    _fee?: number | StdFee | 'auto',
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  submitResult: (
    {
      salt
    }: {
      salt: string;
    },
    _fee?: number | StdFee | 'auto',
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateWheelCells: (
    {
      cells
    }: {
      cells: Cell[];
    },
    _fee?: number | StdFee | 'auto',
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateExecutor: (
    {
      executor
    }: {
      executor: Addr;
    },
    _fee?: number | StdFee | 'auto',
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class LuckyWheelContractClient extends LuckyWheelContractQueryClient implements LuckyWheelContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.submitResult = this.submitResult.bind(this);
    this.updateWheelCells = this.updateWheelCells.bind(this);
    this.updateExecutor = this.updateExecutor.bind(this);
  }

  receive = async (
    {
      amount,
      msg,
      sender
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    _fee: number | StdFee | 'auto' = 'auto',
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateConfig = async (
    {
      feePerSpin,
      owner,
      participationToken,
      rewardToken,
      totalPrize
    }: {
      feePerSpin?: Uint128;
      owner?: Addr;
      participationToken?: AssetInfo;
      rewardToken?: AssetInfo;
      totalPrize?: Uint128;
    },
    _fee: number | StdFee | 'auto' = 'auto',
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          fee_per_spin: feePerSpin,
          owner,
          participation_token: participationToken,
          reward_token: rewardToken,
          total_prize: totalPrize
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  submitResult = async (
    {
      salt
    }: {
      salt: string;
    },
    _fee: number | StdFee | 'auto' = 'auto',
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        submit_result: {
          salt
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateWheelCells = async (
    {
      cells
    }: {
      cells: Cell[];
    },
    _fee: number | StdFee | 'auto' = 'auto',
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_wheel_cells: {
          cells
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateExecutor = async (
    {
      executor
    }: {
      executor: Addr;
    },
    _fee: number | StdFee | 'auto' = 'auto',
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_executor: {
          executor
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
}
